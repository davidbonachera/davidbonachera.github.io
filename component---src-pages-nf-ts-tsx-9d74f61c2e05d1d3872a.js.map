{"version":3,"file":"component---src-pages-nf-ts-tsx-9d74f61c2e05d1d3872a.js","mappings":"mLAMMA,EAAS,mCAAG,+GAEWC,MAAM,wGAFjB,UAKY,OAHhBC,EAFI,QAKCC,OALD,gCAMcD,EAAOE,OANrB,aAMAC,EANA,OAOA,IAAIC,MAAMD,GAPV,wBAUGH,EAAOK,OAVV,kFAYVC,QAAQH,MAAM,sBAAdG,EAAAA,IAZU,kBAaH,IAbG,0DAAH,qDAiBf,qBACI,MAAwBC,EAAAA,SAAoB,MAArCC,EAAP,KAAaC,EAAb,KAQA,OANAX,IAAYY,MACR,SAACC,GACGF,EAAQE,MAKZJ,EAAAA,cAAAA,EAAAA,SAAAA,KACIA,EAAAA,cAACK,EAAAA,EAAD,KACIL,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,aACXN,EAAAA,cAAAA,KAAAA,CAAIM,UAAW,0BAAf,MACAN,EAAAA,cAAAA,IAAAA,CAAGM,UAAW,iBAAd,qCAEJN,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,wCACXN,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,uCACfN,EAAAA,cAAAA,OAAAA,CAAMM,UAAU,0CAAhB,QACAN,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,wCAEnBN,EAAAA,cAAAA,MAAAA,CAAKM,UAAU,uDACVL,MAAAA,OADL,EACKA,EAAMM,MAAMC,KAAI,SAACC,GACd,OACIT,EAAAA,cAAAA,IAAAA,CAAGU,KAAI,6BAA+BD,EAAIE,SAASC,MAAM,KAAK,GAAvD,IAA6DH,EAAII,QACrEC,OAAQ,SAAUR,UAAW,OAC5BN,EAAAA,cAAAA,MAAAA,CACIM,UAAW,yGACXS,IAAKN,EAAIO,KAAKC,QAAQ,GAAGC,IAAKC,IAAKV,EAAIO,KAAKI,OAChDpB,EAAAA,cAAAA,KAAAA,CAAIM,UAAW,sBAAuBG,EAAIO,KAAKI","sources":["webpack://david-bonachera/./src/pages/NFTs.tsx"],"sourcesContent":["import React from 'react';\n\n// @ts-ignore\nimport photo from '../assets/images/davidbonachera.jpeg';\nimport Container from \"../components/container/Container\";\n\nconst fetchNFTs = async (): Promise<any> => {\n    try {\n        const result = await fetch(\n            `https://api.rarible.org/v0.1/items/byOwner?owner=ETHEREUM:0xDb976a283440c919f12AF7681D7dCdF895812Bc4`,\n        );\n        if (result.status !== 200) {\n            const error = await result.text();\n            throw new Error(error);\n        }\n\n        return await result.json();\n    } catch (error) {\n        console.error('fetchAssets failed:', error);\n        return [];\n    }\n};\n\nexport default () => {\n    const [nfts, setNfts] = React.useState<any>(null);\n\n    fetchNFTs().then(\n        (res) => {\n            setNfts(res)\n        }\n    )\n\n    return (\n        <>\n            <Container>\n                <div className=\"mt-4 px-6\">\n                    <h1 className={\"text-3xl font-semibold\"}>?.</h1>\n                    <p className={\"text-gray-500\"}>Collecting NFTs over ETH & FLOW.</p>\n                </div>\n                <div className=\"px-6 relative flex py-5 items-center\">\n                    <div className=\"flex-grow border-t border-gray-200\"></div>\n                    <span className=\"flex-shrink mx-4 text-gray-400 text-xs\">List</span>\n                    <div className=\"flex-grow border-t border-gray-200\"></div>\n                </div>\n                <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5\">\n                    {nfts?.items.map((nft: any) => {\n                        return (\n                            <a href={`https://opensea.io/assets/${nft.contract.split(\":\")[1]}/${nft.tokenId}`}\n                               target={\"_blank\"} className={\"m-3\"}>\n                                <img\n                                    className={\"filter shadow brightness-95 hover:brightness-105 hover:shadow-lg w-full object-cover rounded-lg hover:\"}\n                                    src={nft.meta.content[0].url} alt={nft.meta.name}/>\n                                <h2 className={\"mt-1 font-semibold\"}>{nft.meta.name}</h2>\n                            </a>\n                        )\n                    })}\n                </div>\n            </Container>\n        </>\n    );\n};\n"],"names":["fetchNFTs","fetch","result","status","text","error","Error","json","console","React","nfts","setNfts","then","res","Container","className","items","map","nft","href","contract","split","tokenId","target","src","meta","content","url","alt","name"],"sourceRoot":""}